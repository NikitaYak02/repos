Реализация библиотеки graph.

Структуры, которые помогают реализовать граф:

1) Элемент списка(хранит номер вершины, вес ребра, указатель на следующую вершину).

2) Граф, которые состоит из массива, который отображает ключ(номер вершины) в порядковой номер этой веришны в графе. Каждому номеру соответствует свой список смежности. Граф неориентированный, из-за этого ребра хранятся как бы в удвоенном кол-ве, т.к. информация о ребре добавляется сразу в две вершины. Данная модель была выбрана в целях нахождения баланса между понятностью кода, оптимальностью по памяти и оптимальностью по скорости работы. 

Опишу функции, которые реализовывал и их основные свойства.

1)Добавление вершины.
Получает указатель на граф, номер вершины. Просто добавляется новая запись в таблицу вершин(заносится новый номер в массив). Если в массиве есть пустое место, после удаления вершины, то запись занесется на это место(Из-за этого возрасла сложность занесения новой вершины в граф(O(n) вместо O(1)).
Если вершина существует - функция возвращает -1. Если много вершин, происходит реаллокация элементов графа.

2) Поиск номер записи в графе по номеру вершины.
Получает указатель на граф и номер вершины. Возвращает -1, если нет такой записи, номер в массиве - если есть.

3)Добавление ребра.
Получает указатель на граф, номера первой, второй вершины и вес ребра(все типы long). Если ребро уже существует, то обновляется его вес(в списке смежности первой и второй вершины). Если подается отрицательный вес ребра, то выодится диагностика и считается, что подали ребро с нулевым весом(т.к. реализован алгоритм Дейкстры). Если нет вершин, которые соединены, то сначала добавляются вершины, а потом добавляется ребро(в оба списка смежности).

4) Поиск существования ребра.
Получает указатель на граф, номера первой и второй вершины. Возвращает указатель на запись в списке смежности первого ребра, в котором есть информация о данном ребре. -1 - в случае неудачи.

5) Удаление вершины.
Получает указатель на граф, номер вершины. Если нет вершины, то функция ничего не делает. Информация о ребрах, связанных с удаляемой вершиной, удаляется из списков смежностей других вершин.

6) Удаление ребра.
Удаляется ребро, если оно существует, если оно не существует, то функция ничег оне делает.

Я решал задачу поиска кратчайшей длины между двумя вершинами с помощью алгоритма Дейкстры. Это наложило ограничения на только неотрицательные веса ребер. Функция возрвращает -1, если нет пути между ребрами и число типа long long(считается, что длина влезет в данный тип). 

Чтобы было удобнее взаимодействовать с бибилотекой graph, была написана функция печати устройства графа, котороая выводит кол-во записей(без учета удаленных, на место которых в будущем запишутся записи о новых вершинах, если будет производится запись), и визуализацию списка смежности.

Описание main: граф иницициализируется автоматически при запуске программы. Граф можно удалить вручную, он автоматически реинциализируется. Граф автоматически удаляется при заверешении ввода. Ввод в данном варианте должен выглядит следующим образом:
(одно из доступных имен функций "AddVertex", "AddEdge", "DeleteVertex","DeleteEdge", "EdgePointer", "VertexNum", "Dijkstra", "PrintGraph", "DeleteGraph") параметры через пробел.

Описание некоторых тестов:
1) просто большой ввод без каких-то проблем. Тестируется работа алгоритма Дейкстры и процедура добавления и удаления ребер графов.
2)Тестируется удаление и алгоритм Дейкстры в этих ситуациях.(Ответы 4, 5 и doesn't exist).
3)Тестируется добавление несвязных компонент и функция добавления вершин, которая реаллокирует память


Исправления:
В версии, которую загрузил во время досдачи убрал общую структуры в отдельный заголовочный файл mytypes.h
